#!/usr/bin/env python3
"""
ðŸŽ¨ AI Orchestrator UI Demo Server
Modern UI/UX test iÃ§in basit Flask sunucu
"""

from flask import Flask, render_template, jsonify, request, send_from_directory
import os
import time
import random

app = Flask(__name__)

# Demo data
DEMO_SPECIALISTS = {
    'project_manager': {
        'name': 'AI Proje YÃ¶neticisi',
        'description': 'Proje koordinasyonu, zaman yÃ¶netimi ve ekip organizasyonu konularÄ±nda uzmandÄ±r.',
        'expertise': ['Agile Metodoloji', 'Risk YÃ¶netimi', 'Ekip Koordinasyonu', 'Kalite KontrolÃ¼']
    },
    'lead_developer': {
        'name': 'AI KÄ±demli GeliÅŸtirici', 
        'description': 'YazÄ±lÄ±m mimarisi, kod geliÅŸtirme ve teknik Ã§Ã¶zÃ¼mler konularÄ±nda uzmandÄ±r.',
        'expertise': ['Python', 'JavaScript', 'Sistem Mimarisi', 'API TasarÄ±mÄ±', 'VeritabanÄ±']
    },
    'ui_ux_designer': {
        'name': 'AI UI/UX TasarÄ±mcÄ±',
        'description': 'KullanÄ±cÄ± deneyimi, arayÃ¼z tasarÄ±mÄ± ve kullanÄ±labilirlik konularÄ±nda uzmandÄ±r.',
        'expertise': ['UI/UX Design', 'Figma', 'User Research', 'Prototyping', 'Design Systems']
    },
    'business_analyst': {
        'name': 'AI Ä°ÅŸ Analisti',
        'description': 'Ä°ÅŸ sÃ¼reÃ§leri, gereksinim analizi ve sistem optimizasyonu konularÄ±nda uzmandÄ±r.',
        'expertise': ['Ä°ÅŸ SÃ¼reÃ§ Analizi', 'Gereksinim Toplama', 'Veri Analizi', 'Raporlama']
    }
}

DEMO_RESPONSES = [
    "Bu harika bir proje fikri! Hemen baÅŸlayalÄ±m.",
    "Teknik mimariye odaklanarak baÅŸlayabiliriz.",
    "KullanÄ±cÄ± deneyimi aÃ§Ä±sÄ±ndan bazÄ± Ã¶nerilerim var.",
    "Ä°ÅŸ sÃ¼reÃ§lerini detaylandÄ±rmamÄ±z gerekecek.",
    "Bu konuda kapsamlÄ± bir analiz yapmalÄ±yÄ±z.",
    "Implementasyon aÅŸamasÄ±nda dikkat etmemiz gereken noktalar var."
]

@app.route('/')
def index():
    """Ana sayfa - Universal template"""
    return render_template('index_universal.html')

@app.route('/orchestrator')
def orchestrator():
    """Orchestrator sayfasÄ±"""
    return render_template('orchestrator.html')

@app.route('/api-management')
def api_management():
    """API management sayfasÄ±"""
    return render_template('api_management.html')

# Demo API endpoints
@app.route('/orchestrate', methods=['POST'])
def orchestrate():
    """Demo orchestration endpoint"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        # Simulate processing delay
        time.sleep(random.uniform(1, 3))
        
        # Determine specialists based on keywords
        active_specialists = []
        if any(word in message.lower() for word in ['proje', 'plan', 'organize']):
            active_specialists.append('project_manager')
        if any(word in message.lower() for word in ['kod', 'geliÅŸtir', 'program', 'api']):
            active_specialists.append('lead_developer')
        if any(word in message.lower() for word in ['tasarÄ±m', 'ui', 'ux', 'kullanÄ±cÄ±']):
            active_specialists.append('ui_ux_designer')
        if any(word in message.lower() for word in ['analiz', 'sÃ¼reÃ§', 'iÅŸ', 'gereksinim']):
            active_specialists.append('business_analyst')
            
        # Default to project manager if no specific specialist detected
        if not active_specialists:
            active_specialists = ['project_manager']
        
        # Generate response
        primary_response = f"MesajÄ±nÄ±zÄ± analiz ettim: '{message[:50]}{'...' if len(message) > 50 else ''}'"
        
        # Generate specialist responses
        specialist_responses = {}
        for specialist in active_specialists:
            specialist_responses[specialist] = random.choice(DEMO_RESPONSES)
        
        # Generate suggested actions
        suggested_actions = [
            "Teknik detaylarÄ± inceleyelim",
            "Proje planÄ±nÄ± oluÅŸturalÄ±m", 
            "KullanÄ±cÄ± ihtiyaÃ§larÄ±nÄ± analiz edelim",
            "MVP Ã¶zelliklerini belirleyelim"
        ]
        
        return jsonify({
            'success': True,
            'data': {
                'primary_response': primary_response,
                'active_specialists': active_specialists,
                'specialist_responses': specialist_responses,
                'suggested_next_actions': random.sample(suggested_actions, 2)
            }
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/specialist_info')
def specialist_info():
    """Demo specialist info endpoint"""
    return jsonify({
        'success': True,
        'specialists': DEMO_SPECIALISTS
    })

@app.route('/system_status')
def system_status():
    """Demo system status endpoint"""
    return jsonify({
        'success': True,
        'status': {
            'adapters_available': 3,
            'specialists_available': len(DEMO_SPECIALISTS),
            'uptime': '99.9%',
            'last_check': time.time()
        }
    })

# Static files
@app.route('/static/<path:filename>')
def static_files(filename):
    """Serve static files"""
    return send_from_directory('static', filename)

@app.errorhandler(404)
def not_found(error):
    """404 error handler"""
    return render_template('404.html'), 404 if os.path.exists('templates/404.html') else ('Page not found', 404)

@app.errorhandler(500)
def server_error(error):
    """500 error handler"""
    return jsonify({'error': 'Internal server error', 'success': False}), 500

if __name__ == '__main__':
    print("ðŸŽ¨ AI Orchestrator UI Demo Server Starting...")
    print("ðŸ“¡ Server will be available at:")
    print("   â€¢ http://localhost:5000          - Universal Dashboard")
    print("   â€¢ http://localhost:5000/orchestrator - Specialist Coordination")
    print("   â€¢ http://localhost:5000/api-management - API Management")
    print("\nâœ¨ Modern UI Features:")
    print("   â€¢ Dark/Light Mode Toggle")
    print("   â€¢ Advanced Animations")
    print("   â€¢ Mobile Responsive Design")
    print("   â€¢ Real-time Specialist Coordination")
    print("   â€¢ Professional Analytics Dashboard")
    print("\nðŸš€ Starting development server...")
    
    app.run(
        host='0.0.0.0',
        port=5000,
        debug=True,
        threaded=True
    ) 