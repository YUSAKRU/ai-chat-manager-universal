#!/usr/bin/env python3\n\"\"\"\nPHASE 6.1 COLLABORATION TEST SUITE\nMulti-user Real-time Collaboration Testing\n\nTest Categories:\n1. WebSocket Room Management\n2. User Presence System\n3. Cursor Tracking\n4. Document Sharing\n5. Real-time Sync\n6. UI/UX Validation\n\"\"\"\n\nimport requests\nimport time\nimport json\nimport socketio\nfrom datetime import datetime\nimport threading\nimport asyncio\n\nclass Phase61CollaborationTest:\n    def __init__(self):\n        self.base_url = \"http://localhost:5000\"\n        self.websocket_url = \"http://localhost:5000\"\n        self.test_results = {}\n        self.start_time = datetime.now()\n        self.clients = []\n        \n    def log_test(self, test_name, status, details=\"\"):\n        \"\"\"Test sonucunu logla\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        symbol = \"✅\" if status else \"❌\"\n        print(f\"{symbol} [{timestamp}] {test_name}\")\n        if details:\n            print(f\"   📋 {details}\")\n        \n        self.test_results[test_name] = {\n            \"status\": status,\n            \"details\": details,\n            \"timestamp\": timestamp\n        }\n\n    def test_basic_connectivity(self):\n        \"\"\"Test 1: Basic system connectivity\"\"\"\n        print(\"\\n🔌 TEST 1: BASIC CONNECTIVITY\")\n        print(\"=\" * 40)\n        \n        try:\n            # Test homepage\n            response = requests.get(self.base_url, timeout=5)\n            self.log_test(\"1.1 Homepage Access\", \n                         response.status_code == 200,\n                         f\"Status: {response.status_code}\")\n            \n            # Test canvas API\n            response = requests.get(f\"{self.base_url}/api/canvas/statistics\", timeout=5)\n            self.log_test(\"1.2 Canvas API\", \n                         response.status_code == 200,\n                         f\"Statistics available\")\n            \n            return True\n            \n        except Exception as e:\n            self.log_test(\"1.0 Basic Connectivity\", False, f\"Error: {e}\")\n            return False\n\n    def test_document_creation(self):\n        \"\"\"Test 2: Document creation for collaboration\"\"\"\n        print(\"\\n📄 TEST 2: DOCUMENT CREATION\")\n        print(\"=\" * 40)\n        \n        try:\n            # Create a test document\n            payload = {\n                \"title\": \"Phase 6.1 Collaboration Test\",\n                \"content\": \"# Multi-user Test Document\\n\\nThis document tests real-time collaboration.\",\n                \"type\": \"live_document\"\n            }\n            \n            response = requests.post(\n                f\"{self.base_url}/api/canvas/documents\",\n                json=payload,\n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                doc_data = response.json()\n                self.test_document_id = doc_data.get('document_id')\n                \n                self.log_test(\"2.1 Document Creation\", True,\n                             f\"Doc ID: {self.test_document_id}\")\n                \n                # Test document retrieval\n                get_response = requests.get(\n                    f\"{self.base_url}/api/canvas/documents/{self.test_document_id}\",\n                    timeout=5\n                )\n                \n                self.log_test(\"2.2 Document Retrieval\", \n                             get_response.status_code == 200,\n                             f\"Retrieved successfully\")\n                \n                return True\n            else:\n                self.log_test(\"2.1 Document Creation\", False,\n                             f\"Status: {response.status_code}\")\n                return False\n                \n        except Exception as e:\n            self.log_test(\"2.0 Document Creation\", False, f\"Error: {e}\")\n            return False\n\n    def create_socketio_client(self, client_name):\n        \"\"\"SocketIO client oluştur\"\"\"\n        try:\n            client = socketio.Client()\n            client.client_name = client_name\n            client.events_received = []\n            \n            @client.event\n            def connect():\n                print(f\"🔌 [{client_name}] Connected to WebSocket\")\n                client.events_received.append({'event': 'connect', 'time': time.time()})\n            \n            @client.event\n            def disconnect():\n                print(f\"🔌 [{client_name}] Disconnected from WebSocket\")\n                client.events_received.append({'event': 'disconnect', 'time': time.time()})\n            \n            @client.event\n            def user_joined(data):\n                print(f\"👥 [{client_name}] User joined: {data}\")\n                client.events_received.append({'event': 'user_joined', 'data': data, 'time': time.time()})\n            \n            @client.event\n            def user_joined_room(data):\n                print(f\"👤 [{client_name}] User joined room: {data['user']['name']}\")\n                client.events_received.append({'event': 'user_joined_room', 'data': data, 'time': time.time()})\n            \n            @client.event\n            def user_left_room(data):\n                print(f\"👋 [{client_name}] User left room: {data['user_name']}\")\n                client.events_received.append({'event': 'user_left_room', 'data': data, 'time': time.time()})\n            \n            @client.event\n            def cursor_updated(data):\n                print(f\"🖱️ [{client_name}] Cursor updated: {data['user_name']} at {data['position']}\")\n                client.events_received.append({'event': 'cursor_updated', 'data': data, 'time': time.time()})\n            \n            return client\n            \n        except Exception as e:\n            print(f\"❌ Failed to create SocketIO client {client_name}: {e}\")\n            return None\n\n    def test_websocket_collaboration(self):\n        \"\"\"Test 3: WebSocket collaboration features\"\"\"\n        print(\"\\n👥 TEST 3: WEBSOCKET COLLABORATION\")\n        print(\"=\" * 40)\n        \n        if not hasattr(self, 'test_document_id'):\n            self.log_test(\"3.0 WebSocket Collaboration\", False, \"No test document available\")\n            return False\n        \n        try:\n            # Create two clients\n            client1 = self.create_socketio_client(\"User_A\")\n            client2 = self.create_socketio_client(\"User_B\")\n            \n            if not client1 or not client2:\n                self.log_test(\"3.1 Client Creation\", False, \"Failed to create clients\")\n                return False\n            \n            # Connect clients\n            client1.connect(self.websocket_url)\n            client2.connect(self.websocket_url)\n            \n            time.sleep(2)  # Connection setup\n            \n            self.log_test(\"3.1 Client Connection\", \n                         client1.connected and client2.connected,\n                         f\"Client1: {client1.connected}, Client2: {client2.connected}\")\n            \n            # Join same document\n            client1.emit('join_document', {\n                'document_id': self.test_document_id,\n                'user_name': 'User_A'\n            })\n            \n            time.sleep(1)\n            \n            client2.emit('join_document', {\n                'document_id': self.test_document_id,\n                'user_name': 'User_B'\n            })\n            \n            time.sleep(2)  # Event processing\n            \n            # Check if users joined events were received\n            user_a_events = [e for e in client1.events_received if e['event'] in ['user_joined', 'user_joined_room']]\n            user_b_events = [e for e in client2.events_received if e['event'] in ['user_joined', 'user_joined_room']]\n            \n            self.log_test(\"3.2 Document Join Events\", \n                         len(user_a_events) > 0 and len(user_b_events) > 0,\n                         f\"User_A events: {len(user_a_events)}, User_B events: {len(user_b_events)}\")\n            \n            # Test cursor tracking\n            client1.emit('cursor_moved', {\n                'document_id': self.test_document_id,\n                'position': {'x': 100, 'y': 50, 'relativeX': 0.5, 'relativeY': 0.2}\n            })\n            \n            time.sleep(1)\n            \n            # Check if client2 received cursor update\n            cursor_events = [e for e in client2.events_received if e['event'] == 'cursor_updated']\n            \n            self.log_test(\"3.3 Cursor Tracking\", \n                         len(cursor_events) > 0,\n                         f\"Cursor events received: {len(cursor_events)}\")\n            \n            # Cleanup\n            client1.disconnect()\n            client2.disconnect()\n            \n            self.clients = [client1, client2]\n            \n            return True\n            \n        except Exception as e:\n            self.log_test(\"3.0 WebSocket Collaboration\", False, f\"Error: {e}\")\n            return False\n\n    def test_ui_components(self):\n        \"\"\"Test 4: UI component loading\"\"\"\n        print(\"\\n🎨 TEST 4: UI COMPONENTS\")\n        print(\"=\" * 40)\n        \n        try:\n            # Test LiveEditor.js\n            response = requests.get(f\"{self.base_url}/static/js/canvas/LiveEditor.js\", timeout=5)\n            liveeditor_loaded = response.status_code == 200 and \"Phase 6.1\" in response.text\n            \n            self.log_test(\"4.1 LiveEditor.js (Phase 6.1)\", \n                         liveeditor_loaded,\n                         f\"Status: {response.status_code}, Phase 6.1 features: {liveeditor_loaded}\")\n            \n            # Test Canvas CSS\n            response = requests.get(f\"{self.base_url}/static/css/canvas.css\", timeout=5)\n            css_loaded = response.status_code == 200 and \"MULTI-USER COLLABORATION\" in response.text\n            \n            self.log_test(\"4.2 Canvas CSS (Collaboration)\", \n                         css_loaded,\n                         f\"Status: {response.status_code}, Collaboration styles: {css_loaded}\")\n            \n            # Test main canvas logic\n            response = requests.get(f\"{self.base_url}/static/js/canvas/main_canvas_logic.js\", timeout=5)\n            canvas_logic_loaded = response.status_code == 200 and \"Multi-user Collaboration\" in response.text\n            \n            self.log_test(\"4.3 Canvas Logic (Multi-user)\", \n                         canvas_logic_loaded,\n                         f\"Status: {response.status_code}, Multi-user features: {canvas_logic_loaded}\")\n            \n            return True\n            \n        except Exception as e:\n            self.log_test(\"4.0 UI Components\", False, f\"Error: {e}\")\n            return False\n\n    def generate_final_report(self):\n        \"\"\"Final test raporu oluştur\"\"\"\n        print(\"\\n\" + \"=\" * 60)\n        print(\"🏁 PHASE 6.1 COLLABORATION TEST REPORT\")\n        print(\"=\" * 60)\n        \n        total_tests = len(self.test_results)\n        passed_tests = sum(1 for result in self.test_results.values() if result['status'])\n        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0\n        \n        print(f\"\\n📊 SUMMARY:\")\n        print(f\"   Total Tests: {total_tests}\")\n        print(f\"   Passed: {passed_tests}\")\n        print(f\"   Failed: {total_tests - passed_tests}\")\n        print(f\"   Success Rate: {success_rate:.1f}%\")\n        \n        print(f\"\\n📋 DETAILED RESULTS:\")\n        for test_name, result in self.test_results.items():\n            symbol = \"✅\" if result['status'] else \"❌\"\n            print(f\"   {symbol} {test_name}: {result['details'] or 'OK'}\")\n        \n        print(f\"\\n⏱️ DURATION: {(datetime.now() - self.start_time).total_seconds():.1f} seconds\")\n        \n        # Collaboration-specific insights\n        if success_rate >= 90:\n            print(\"\\n🎉 PHASE 6.1 STATUS: EXCELLENT! Multi-user collaboration is ready!\")\n        elif success_rate >= 80:\n            print(\"\\n👍 PHASE 6.1 STATUS: GOOD! Minor issues to resolve.\")\n        elif success_rate >= 70:\n            print(\"\\n⚠️ PHASE 6.1 STATUS: MODERATE! Several issues need attention.\")\n        else:\n            print(\"\\n❌ PHASE 6.1 STATUS: CRITICAL! Major collaboration issues detected.\")\n        \n        return success_rate\n\n    def run_all_tests(self):\n        \"\"\"Tüm testleri çalıştır\"\"\"\n        print(\"🚀 PHASE 6.1 MULTI-USER COLLABORATION TEST SUITE\")\n        print(\"\" + \"=\" * 60)\n        print(f\"⏰ Started at: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}\")\n        print(f\"🎯 Target: Multi-user real-time collaboration features\")\n        \n        # Run test sequence\n        tests = [\n            self.test_basic_connectivity,\n            self.test_document_creation,\n            self.test_websocket_collaboration,\n            self.test_ui_components\n        ]\n        \n        for test in tests:\n            try:\n                test()\n                time.sleep(1)  # Brief pause between tests\n            except Exception as e:\n                test_name = test.__name__.replace('test_', '').replace('_', ' ').title()\n                self.log_test(test_name, False, f\"Test failed: {e}\")\n        \n        # Generate final report\n        return self.generate_final_report()\n\nif __name__ == \"__main__\":\n    test_suite = Phase61CollaborationTest()\n    success_rate = test_suite.run_all_tests()\n    \n    # Exit with appropriate code\n    exit(0 if success_rate >= 80 else 1)\n 